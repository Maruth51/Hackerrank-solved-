#!/bin/python3

import math
import os
import random
import re
import sys

# Complete the findShortest function below.

#
# For the weighted graph, <name>:
#
# 1. The number of nodes is <name>_nodes.
# 2. The number of edges is <name>_edges.
# 3. An edge exists between <name>_from[i] to <name>_to[i].

#
#
class Graph:
    vertex = dict()
    def add_node(self,node):
        self.vertex[node.name] = node
class Node:
    def __init__(self,name,color):
        self.name = name
        self.color = color
        self.edge =[]
    def add_edge(self,to_node):
        self.edge.append(to_node)
def findShortest(graph_nodes, graph_from, graph_to, ids, val):
    n = graph_nodes
    graph = Graph()
    s_color =[]
    for i in range (1,n+1):
        graph.add_node(Node(i,ids[i-1]))
    for j in range (0,len(graph_from)):
        fr = graph_from[j]
        to = graph_to[j]
        graph.vertex[fr].add_edge(to)
        graph.vertex[to].add_edge(fr)
    for i in range (1,n+1):
        if val == graph.vertex[i].color:
            s_color.append(i)
    l1 = path(graph,s_color)
    l1 = sorted(l1)
    print(l1)
    if len(l1) == 0:
        return -1
    else:
        return l1[0]
    # solve here
def path(graph,n_list):
    length=[]
    print(n_list)
    for i in range(len(n_list)):
        for k in range(i+1,len(n_list)):
            find = False
            queue =[]
            visited =[]
            ident = {}
            start = n_list[i]
            end = n_list[k]
            queue.append(start)
            while(len(queue)>0):
                node = queue[0]
                if end in graph.vertex[node].edge:
                    ident[end] = node
                    find = True
                    break;
                visited.append(queue.pop(0))
                for j in graph.vertex[node].edge:
                    if j not in visited:
                        queue.append(j)
                        ident[j] = node
            if find:
                n = end
                paths = []
                fol = None
                while fol != start:
                    fol = ident[n]
                    n = fol
                    paths.append(fol)
                length.append(len(paths))
    return length
                    


        
if __name__ == '__main__':
    fptr = open(os.environ['OUTPUT_PATH'], 'w')

    graph_nodes, graph_edges = map(int, input().split())

    graph_from = [0] * graph_edges
    graph_to = [0] * graph_edges

    for i in range(graph_edges):
        graph_from[i], graph_to[i] = map(int, input().split())

    ids = list(map(int, input().rstrip().split()))

    val = int(input())

    ans = findShortest(graph_nodes, graph_from, graph_to, ids, val)

    fptr.write(str(ans) + '\n')

    fptr.close()
